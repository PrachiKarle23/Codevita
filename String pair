//1
// Online C++ compiler to run C++ program online
#include <iostream>
#include<unordered_map>
using namespace std;

string mapping[] = {
    "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten",
    "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty",
    "twenty-one", "twenty-two", "twenty-three", "twenty-four", "twenty-five", "twenty-six", "twenty-seven", "twenty-eight", "twenty-nine", "thirty",
    "thirty-one", "thirty-two", "thirty-three", "thirty-four", "thirty-five", "thirty-six", "thirty-seven", "thirty-eight", "thirty-nine", "forty",
    "forty-one", "forty-two", "forty-three", "forty-four", "forty-five", "forty-six", "forty-seven", "forty-eight", "forty-nine", "fifty",
    "fifty-one", "fifty-two", "fifty-three", "fifty-four", "fifty-five", "fifty-six", "fifty-seven", "fifty-eight", "fifty-nine", "sixty",
    "sixty-one", "sixty-two", "sixty-three", "sixty-four", "sixty-five", "sixty-six", "sixty-seven", "sixty-eight", "sixty-nine", "seventy",
    "seventy-one", "seventy-two", "seventy-three", "seventy-four", "seventy-five", "seventy-six", "seventy-seven", "seventy-eight", "seventy-nine", "eighty",
    "eighty-one", "eighty-two", "eighty-three", "eighty-four", "eighty-five", "eighty-six", "eighty-seven", "eighty-eight", "eighty-nine", "ninety",
    "ninety-one", "ninety-two", "ninety-three", "ninety-four", "ninety-five", "ninety-six", "ninety-seven", "ninety-eight", "ninety-nine", "one hundred"
};
int solve(int val)
{
    string a=mapping[val];
    int cnt=0;
    for(int i=0;i<a.length();i++)
    {
        if(a[i]=='a'||a[i]=='e'|| a[i]=='i' || a[i]=='o'|| a[i]=='u')
        {
            cnt++;
        }
    }
    return cnt;
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int d=0;
    for(int i=0;i<n;i++)
    {
       d+=solve(arr[i]); 
    }
    
    unordered_map<int,bool>mp;
    for(int i=0;i<n;i++){
        mp[arr[i]]=false;
    }
    int ans=0;
    for(int i=0;i<n;i++)
    {
        int complement=d-arr[i];
        if(mp.count(complement) && mp[complement]!=true)
        {
            ans++;
            mp[arr[i]]=true;
        }
    }
    if(ans>100){
        cout<<"greater than 100";
    }
    else{
        cout<<ans<<" "<<mapping[ans];
    }
    
    return 0;
}




//2
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
using namespace std;

// Function to convert numbers to their textual representation
string numToText(int num) {
    unordered_map<int, string> numToWords = {
        {0, "zero"}, {1, "one"}, {2, "two"}, {3, "three"}, {4, "four"},
        {5, "five"}, {6, "six"}, {7, "seven"}, {8, "eight"}, {9, "nine"},
        {10, "ten"}, {11, "eleven"}, {12, "twelve"}, {13, "thirteen"}, {14, "fourteen"},
        {15, "fifteen"}, {16, "sixteen"}, {17, "seventeen"}, {18, "eighteen"}, {19, "nineteen"},
        {20, "twenty"}, {30, "thirty"}, {40, "forty"}, {50, "fifty"}, {60, "sixty"},
        {70, "seventy"}, {80, "eighty"}, {90, "ninety"}, {100, "hundred"}
    };

    if (num <= 20 || num == 100) {
        return numToWords[num];
    } else {
        int tens = (num / 10) * 10;
        int ones = num % 10;
        return ones == 0 ? numToWords[tens] : numToWords[tens] + numToWords[ones];
    }
}

// Function to count vowels in a string
int countVowels(const string& str) {
    int count = 0;
    for (char c : str) {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            count++;
        }
    }
    return count;
}

// Function to find the textual representation of a number
string numberToWords(int num) {
    unordered_map<int, string> numToWords = {
        {0, "zero"}, {1, "one"}, {2, "two"}, {3, "three"}, {4, "four"},
        {5, "five"}, {6, "six"}, {7, "seven"}, {8, "eight"}, {9, "nine"},
        {10, "ten"}, {11, "eleven"}, {12, "twelve"}, {13, "thirteen"}, {14, "fourteen"},
        {15, "fifteen"}, {16, "sixteen"}, {17, "seventeen"}, {18, "eighteen"}, {19, "nineteen"},
        {20, "twenty"}, {30, "thirty"}, {40, "forty"}, {50, "fifty"}, {60, "sixty"},
        {70, "seventy"}, {80, "eighty"}, {90, "ninety"}, {100, "hundred"}
    };
    
    if (num >= 0 && num <= 100) {
        return numToWords[num];
    }
    return "";
}

// Function to count the number of pairs whose sum equals D
int countPairs(const vector<int>& nums, int D) {
    int count = 0;
    int n = nums.size();
    
    // Count unordered pairs whose sum is equal to D
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nums[i] + nums[j] == D) {
                count++;
            }
        }
    }
    return count;
}

int main() {
    int N;
    cin >> N;
    
    vector<int> nums(N);
    int totalVowels = 0;
    
    // Reading the numbers and calculating the total number of vowels
    for (int i = 0; i < N; i++) {
        cin >> nums[i];
        string text = numToText(nums[i]);
        totalVowels += countVowels(text);
    }
    
    // Finding the number of pairs whose sum equals D (totalVowels)
    int D = totalVowels;
    int pairCount = countPairs(nums, D);
    
    // Output the result in textual format
    if (pairCount > 100) {
        cout << "greater 100" << endl;
    } else {
        cout << numberToWords(pairCount) << endl;
    }

    return 0;
}
