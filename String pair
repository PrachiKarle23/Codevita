#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
using namespace std;

// Function to convert numbers to their textual representation
string numToText(int num) {
    unordered_map<int, string> numToWords = {
        {0, "zero"}, {1, "one"}, {2, "two"}, {3, "three"}, {4, "four"},
        {5, "five"}, {6, "six"}, {7, "seven"}, {8, "eight"}, {9, "nine"},
        {10, "ten"}, {11, "eleven"}, {12, "twelve"}, {13, "thirteen"}, {14, "fourteen"},
        {15, "fifteen"}, {16, "sixteen"}, {17, "seventeen"}, {18, "eighteen"}, {19, "nineteen"},
        {20, "twenty"}, {30, "thirty"}, {40, "forty"}, {50, "fifty"}, {60, "sixty"},
        {70, "seventy"}, {80, "eighty"}, {90, "ninety"}, {100, "hundred"}
    };

    if (num <= 20 || num == 100) {
        return numToWords[num];
    } else {
        int tens = (num / 10) * 10;
        int ones = num % 10;
        return ones == 0 ? numToWords[tens] : numToWords[tens] + numToWords[ones];
    }
}

// Function to count vowels in a string
int countVowels(const string& str) {
    int count = 0;
    for (char c : str) {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            count++;
        }
    }
    return count;
}

// Function to find the textual representation of a number
string numberToWords(int num) {
    unordered_map<int, string> numToWords = {
        {0, "zero"}, {1, "one"}, {2, "two"}, {3, "three"}, {4, "four"},
        {5, "five"}, {6, "six"}, {7, "seven"}, {8, "eight"}, {9, "nine"},
        {10, "ten"}, {11, "eleven"}, {12, "twelve"}, {13, "thirteen"}, {14, "fourteen"},
        {15, "fifteen"}, {16, "sixteen"}, {17, "seventeen"}, {18, "eighteen"}, {19, "nineteen"},
        {20, "twenty"}, {30, "thirty"}, {40, "forty"}, {50, "fifty"}, {60, "sixty"},
        {70, "seventy"}, {80, "eighty"}, {90, "ninety"}, {100, "hundred"}
    };
    
    if (num >= 0 && num <= 100) {
        return numToWords[num];
    }
    return "";
}

// Function to count the number of pairs whose sum equals D
int countPairs(const vector<int>& nums, int D) {
    int count = 0;
    int n = nums.size();
    
    // Count unordered pairs whose sum is equal to D
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nums[i] + nums[j] == D) {
                count++;
            }
        }
    }
    return count;
}

int main() {
    int N;
    cin >> N;
    
    vector<int> nums(N);
    int totalVowels = 0;
    
    // Reading the numbers and calculating the total number of vowels
    for (int i = 0; i < N; i++) {
        cin >> nums[i];
        string text = numToText(nums[i]);
        totalVowels += countVowels(text);
    }
    
    // Finding the number of pairs whose sum equals D (totalVowels)
    int D = totalVowels;
    int pairCount = countPairs(nums, D);
    
    // Output the result in textual format
    if (pairCount > 100) {
        cout << "greater 100" << endl;
    } else {
        cout << numberToWords(pairCount) << endl;
    }

    return 0;
}
